import { Manager } from "./manager";
export declare class Frame {
    private manager;
    private title;
    private address;
    private rndID;
    private divFrame;
    private divHead;
    private imgMenu;
    private divTitle;
    private imgMinimize;
    private imgMaximize;
    private imgClose;
    private iframeBody;
    private divFoot;
    private imgStatusType;
    private divStatusText;
    private imgResize;
    private minimized;
    private maximized;
    private lastWidth;
    private lastHeight;
    constructor(manager: Manager, title: string, address: string);
    private initFrameTitle;
    private initDivFrame;
    private loadFrameInitBounds;
    private getFrameWindowStyleID;
    private initDivHead;
    private initIFrameBody;
    private initDivFoot;
    private initDraggable;
    getTitle(): string;
    getID(): string;
    install(): void;
    headMenuAction(): void;
    headMinimizeAction(): void;
    headMaximizeAction(): void;
    headCloseAction(): void;
    statusInfo(message: string): void;
    statusError(error: any, origin: string): void;
    saveFrameBounds(): void;
    show(): void;
    close(): void;
    getDocBody(): HTMLElement;
    newDialog(title: string, divContent: HTMLDivElement): FrameDialog;
    newPopup(parent: HTMLElement, divContent: HTMLDivElement): FramePopup;
}
export declare class FrameDialog {
    private title;
    private docBody;
    private divContent;
    private divDialog;
    private divTop;
    private spanTitle;
    private spanClose;
    private imgClose;
    private divPack;
    private showing;
    private docNodes;
    constructor(title: string, docBody: HTMLElement, divContent: HTMLDivElement);
    private initDialog;
    private initTop;
    private initPack;
    show(): void;
    close(): void;
}
export declare class FramePopup {
    private parent;
    private docBody;
    private divContent;
    private divPopup;
    constructor(parent: HTMLElement, docBody: HTMLElement, divContent: HTMLDivElement);
    private initPopup;
    private addFocusOutCloseToAll;
    private delFocusOutCloseFromAll;
    private onFocusOutClose;
    addCloseButton(): void;
    addCloseFocusout(el: HTMLElement): void;
    addCloseFocusoutToAll(): void;
    show(): void;
    close(): void;
}
//# sourceMappingURL=frame.d.ts.map